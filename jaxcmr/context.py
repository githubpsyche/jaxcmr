# AUTOGENERATED! DO NOT EDIT! File to edit: ../notebooks/context.ipynb.

# %% auto 0
__all__ = ['TemporalContext']

# %% ../notebooks/context.ipynb 2
from jax import numpy as jnp
from simple_pytree import Pytree

from .math import normalize_magnitude
from .typing import Array, Float, Float_
from .state_analysis import matrix_heatmap
import io
import base64
import matplotlib.pyplot as plt


class TemporalContext(Pytree):
    """Temporal context representation for memory search models."""

    def __init__(self, item_count: int, size: int):
        """Create a new temporal context model.

        Args:
            item_count: the number of items in the context model.
            size: the size of the context representation.
        """
        self.size = size
        self.zeros = jnp.zeros(size)
        self.state = self.zeros.at[0].set(1)
        self.initial_state = self.zeros.at[0].set(1)
        self.next_outlist_unit = item_count + 1 

    @classmethod
    def init(cls, item_count: int) -> "TemporalContext":
        """Standardized initialization for a new context model.

        Args:
            item_count: the number of items in the context model.
        """
        return cls(item_count, item_count + 1)
    
    def integrate(
        self,
        context_input: Float[Array, " context_feature_units"],
        drift_rate: Float_,
    ) -> "TemporalContext":
        """Returns context after integrating input representation, preserving unit length.

        Args:
            context_input: the input representation to be integrated into the contextual state.
            drift_rate: The drift rate parameter.
        """
        context_input = normalize_magnitude(context_input)
        rho = jnp.sqrt(
            1 + jnp.square(drift_rate) * (jnp.square(self.state * context_input) - 1)
        ) - (drift_rate * (self.state * context_input))
        return self.replace(
            state=normalize_magnitude((rho * self.state) + (drift_rate * context_input))
        )

    def _repr_markdown_(self):
        """Returns a markdown representation of the context model."""
        fig, ax = matrix_heatmap(self.state, figsize=(10, 1))

        ax.set_xlabel("")
        ax.set_ylabel("")
        # ax.set_xticks([])
        ax.set_yticks([])

        # Remove colorbar safely if desired:
        for coll in ax.collections:
            if hasattr(coll, 'colorbar') and coll.colorbar:
                coll.colorbar.remove()

        buf = io.BytesIO()
        fig.savefig(buf, format="png", bbox_inches="tight")
        plt.close(fig)

        encoded = base64.b64encode(buf.getvalue()).decode('utf-8')
        return f'<img src="data:image/png;base64,{encoded}" />'
